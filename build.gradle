buildscript {
    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.2.71'

    // Needed so we can resolve the test library from the artifactory
    id "com.jfrog.artifactory" version "4.7.5"
}

configurations {
    ktlint
}

repositories {
    jcenter()
    mavenCentral()

    // That is where the JDregistry is currently hosted
    maven {
        url  "https://dl.bintray.com/lukaszimmermann/jdregistry"
    }

    // The Artifactory for the PHT project
    maven {
        url "https://artifactory.difuture.de/pht"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    // The linter
    ktlint "com.github.shyiko:ktlint:0.29.0"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.71"

    // API Extension with Hibernate
    compile group: 'de.difuture.ekut.pht.lib', name: 'api', version: '0.1.9'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.17.Final'
}

apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'

group = "de.difuture.ekut.pht.lib"
version = "0.1.9"


publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/libs/api-hibernate-0.1.9.pom")
    }
}

/*
 * Enable source and javadoc for Maven publish
 */

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

/*
 * The Linter
 */
task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}


/*
 * Generating the test report
 *
 */
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport

/*
 * Generating the Java Docs
 *
 */
dokka {
    outputFormat = 'html'
    outputDirectory = "docs/javadoc"
}
